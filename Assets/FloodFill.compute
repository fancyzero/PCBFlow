#pragma kernel CSInit
#pragma kernel CSFlood
#pragma kernel CSResolve
#pragma enable_d3d11_debug_symbols
struct FloodPixel
{
	int2 src;
	int2 offset;
	int valid;
	int filled;
	uint steps;
	uint maxSteps;
};

RWTexture2D<float4> Result;
RWStructuredBuffer<FloodPixel> pixels;
RWStructuredBuffer<FloodPixel> pixelsOutput;
Texture2D<float4> Mask;
int2 _Dimensions;


uint ToLinear( uint2 id)
{
	return ((uint)((id).x+(id).y*_Dimensions.x));
} 


float Compare(FloodPixel a, FloodPixel b)
{
	if (a.filled != b.filled)
	{
		return a.filled - b.filled;
	}

	int2 aa = a.src;
	int2 bb = b.src;
	
	if (aa.x != bb.x)
	{
		return sign(aa.x - bb.x);
	}
	else if (aa.y != bb.y )
	{
		return sign(aa.y-bb.y);
	}
	else
	{
		return 0;
	}
	

}

bool IsMax(FloodPixel test, FloodPixel a, FloodPixel b, FloodPixel c, FloodPixel d)
{
	return Compare(test, a) >=0 && Compare(test, b) >=0 && Compare(test, c) >=0  && Compare(test, d) >=0 ;

}

uint2 WrapId( int2 id)
{
	uint2 newID = (id+_Dimensions) % _Dimensions;
	return newID;
}


[numthreads(8,8,1)]
void CSInit (uint3 id : SV_DispatchThreadID)
{
	float m = step(0.5,Mask[id.xy].g);
	float s = step(0.5,Mask[id.xy].r);
	
	uint buffID = ToLinear(id.xy);
	pixels[buffID].src = id.xy;
	pixels[buffID].offset = 0;
	pixels[buffID].steps = 0;
	pixels[buffID].maxSteps = 0;
	if ( s > 0.5 && m > 0.5)
	{
		pixels[buffID].filled = 1;
	}
	else
	{
		pixels[buffID].filled = 0;
	}

	if ( m > 0.5)		
	{
		pixels[buffID].steps = 0;
		pixels[buffID].valid = 1;
	}
	else		
	{
		pixels[buffID].steps = -1;
		pixels[buffID].valid = 0;
		
	}
}


[numthreads(8,8,1)]
void CSFlood (uint3 id : SV_DispatchThreadID)
{
	uint buffID = ToLinear(id.xy);
	FloodPixel maxValue = pixels[buffID];
	FloodPixel newValue = pixels[buffID];
	int2 offset = 0;
	bool filled = false;
	if (pixels[buffID].valid > 0)
	{
		int2 id_a = id.xy+int2(1, 0);
		int2 id_b = id.xy+int2(-1,0);
		int2 id_c = id.xy+int2(0, 1);
		int2 id_d = id.xy+int2(0,-1);
		FloodPixel a = pixels[ToLinear(WrapId(id_a))] ;
		FloodPixel b = pixels[ToLinear(WrapId(id_b))] ;
		FloodPixel c = pixels[ToLinear(WrapId(id_c))] ;
		FloodPixel d = pixels[ToLinear(WrapId(id_d))] ;
		FloodPixel e = pixels[buffID] ;
		
		if ( IsMax( a,b,c,d,e) 		&&  a.filled > 0)
		{
			maxValue  = a;
			filled = true;
			offset = int2(1,0);
		}
		else if ( IsMax( b,c,d,e,a) &&  b.filled>0)
		{
			maxValue  = b;
			filled = true;
			offset = int2(-1,0);
		}
		else if ( IsMax( c,d,e,a,b) &&  c.filled>0)
		{
			maxValue  = c;
			filled = true;
			offset = int2(0,1);

		}
		else if ( IsMax( d,e,a,b,c) &&  d.filled>0)
		{
			maxValue  = d;
			filled = true;
			offset = int2(0,-1);
		}
	}

	if (newValue.src.x == maxValue.src.x && newValue.src.y == maxValue.src.y)
	{
		filled = false;
	}
	if (filled)
	{
		newValue.src = maxValue.src;
		newValue.steps = maxValue.steps+1;
		newValue.offset = maxValue.offset+offset;
		newValue.valid = 1;
		newValue.filled = 1;
	}

	pixelsOutput[buffID].src = newValue.src;
	pixelsOutput[buffID].steps = newValue.steps;
	pixelsOutput[buffID].offset = newValue.offset;
	pixelsOutput[buffID].valid = newValue.valid;
	pixelsOutput[buffID].filled = newValue.filled;

	uint dummy = 0;
	InterlockedMax(pixelsOutput[ToLinear(newValue.src)].maxSteps,newValue.steps,dummy);
}


[numthreads(8,8,1)]
void CSResolve(uint3 id : SV_DispatchThreadID)
{
	int buffID = ToLinear(id.xy);
	int startPointBuffID = ToLinear(pixels[buffID].src);
	
	float4 r;
	r.xy = pixels[buffID].offset.xy/float2(_Dimensions);
	r.z = pixels[startPointBuffID].maxSteps;
	r.a = pixels[buffID].steps;
	Result[id.xy] = r;
}
